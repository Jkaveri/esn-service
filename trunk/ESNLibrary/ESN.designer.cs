#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ESNLibrary
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EVENT_SOCIAL_NETWORK")]
	public partial class ESNDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertWebsiteInfo(WebsiteInfo instance);
    partial void UpdateWebsiteInfo(WebsiteInfo instance);
    partial void DeleteWebsiteInfo(WebsiteInfo instance);
    partial void InsertAccountInfo(AccountInfo instance);
    partial void UpdateAccountInfo(AccountInfo instance);
    partial void DeleteAccountInfo(AccountInfo instance);
    partial void InsertActivity(Activity instance);
    partial void UpdateActivity(Activity instance);
    partial void DeleteActivity(Activity instance);
    partial void InsertActivityType(ActivityType instance);
    partial void UpdateActivityType(ActivityType instance);
    partial void DeleteActivityType(ActivityType instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertEventInfo(EventInfo instance);
    partial void UpdateEventInfo(EventInfo instance);
    partial void DeleteEventInfo(EventInfo instance);
    partial void InsertEventTrustDetail(EventTrustDetail instance);
    partial void UpdateEventTrustDetail(EventTrustDetail instance);
    partial void DeleteEventTrustDetail(EventTrustDetail instance);
    partial void InsertEventType(EventType instance);
    partial void UpdateEventType(EventType instance);
    partial void DeleteEventType(EventType instance);
    partial void InsertRelation(Relation instance);
    partial void UpdateRelation(Relation instance);
    partial void DeleteRelation(Relation instance);
    partial void InsertRelationType(RelationType instance);
    partial void UpdateRelationType(RelationType instance);
    partial void DeleteRelationType(RelationType instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertShareType(ShareType instance);
    partial void UpdateShareType(ShareType instance);
    partial void DeleteShareType(ShareType instance);
    partial void InsertSuggestion(Suggestion instance);
    partial void UpdateSuggestion(Suggestion instance);
    partial void DeleteSuggestion(Suggestion instance);
    partial void InsertUserLocation(UserLocation instance);
    partial void UpdateUserLocation(UserLocation instance);
    partial void DeleteUserLocation(UserLocation instance);
    #endregion
		
		public ESNDataContext() : 
				base(global::ESNLibrary.Properties.Settings.Default.EVENT_SOCIAL_NETWORKConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ESNDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ESNDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ESNDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ESNDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<WebsiteInfo> WebsiteInfos
		{
			get
			{
				return this.GetTable<WebsiteInfo>();
			}
		}
		
		public System.Data.Linq.Table<AccountInfo> AccountInfos
		{
			get
			{
				return this.GetTable<AccountInfo>();
			}
		}
		
		public System.Data.Linq.Table<Activity> Activities
		{
			get
			{
				return this.GetTable<Activity>();
			}
		}
		
		public System.Data.Linq.Table<ActivityType> ActivityTypes
		{
			get
			{
				return this.GetTable<ActivityType>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<EventInfo> EventInfos
		{
			get
			{
				return this.GetTable<EventInfo>();
			}
		}
		
		public System.Data.Linq.Table<EventTrustDetail> EventTrustDetails
		{
			get
			{
				return this.GetTable<EventTrustDetail>();
			}
		}
		
		public System.Data.Linq.Table<EventType> EventTypes
		{
			get
			{
				return this.GetTable<EventType>();
			}
		}
		
		public System.Data.Linq.Table<Relation> Relations
		{
			get
			{
				return this.GetTable<Relation>();
			}
		}
		
		public System.Data.Linq.Table<RelationType> RelationTypes
		{
			get
			{
				return this.GetTable<RelationType>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<ShareType> ShareTypes
		{
			get
			{
				return this.GetTable<ShareType>();
			}
		}
		
		public System.Data.Linq.Table<Suggestion> Suggestions
		{
			get
			{
				return this.GetTable<Suggestion>();
			}
		}
		
		public System.Data.Linq.Table<UserLocation> UserLocations
		{
			get
			{
				return this.GetTable<UserLocation>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CheckEmailAndPassword")]
		public ISingleResult<CheckEmailAndPasswordResult> CheckEmailAndPassword([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Email", DbType="VarChar(200)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Password", DbType="VarChar(200)")] string password)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), email, password);
			return ((ISingleResult<CheckEmailAndPasswordResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SearchFriend")]
		public ISingleResult<SearchFriendResult> SearchFriend([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccID", DbType="Int")] System.Nullable<int> accID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Keyword", DbType="NVarChar(200)")] string keyword)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accID, keyword);
			return ((ISingleResult<SearchFriendResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CreateNewEvent")]
		public int CreateNewEvent([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccID", DbType="Int")] System.Nullable<int> accID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EventType", DbType="Int")] System.Nullable<int> eventType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Title", DbType="NVarChar(500)")] string title, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(500)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Lat", DbType="Float")] System.Nullable<double> lat, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Lng", DbType="Float")] System.Nullable<double> lng, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Picture", DbType="VarChar(1000)")] string picture)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accID, eventType, title, description, lat, lng, picture);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetFriendList")]
		public ISingleResult<GetFriendListResult> GetFriendList([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccID", DbType="Int")] System.Nullable<int> accID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accID);
			return ((ISingleResult<GetFriendListResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetFriendLocation")]
		public ISingleResult<GetFriendLocationResult> GetFriendLocation([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccID", DbType="Int")] System.Nullable<int> accID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accID);
			return ((ISingleResult<GetFriendLocationResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetHistoryLocation")]
		public ISingleResult<GetHistoryLocationResult> GetHistoryLocation([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccID", DbType="Int")] System.Nullable<int> accID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accID);
			return ((ISingleResult<GetHistoryLocationResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetInvitation")]
		public ISingleResult<GetInvitationResult> GetInvitation([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccID", DbType="Int")] System.Nullable<int> accID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accID);
			return ((ISingleResult<GetInvitationResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetNotification")]
		public ISingleResult<GetNotificationResult> GetNotification([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccID", DbType="Int")] System.Nullable<int> accID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accID);
			return ((ISingleResult<GetNotificationResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LoadAllEvent")]
		public ISingleResult<LoadAllEventResult> LoadAllEvent()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<LoadAllEventResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LoadComment")]
		public ISingleResult<LoadCommentResult> LoadComment([global::System.Data.Linq.Mapping.ParameterAttribute(Name="EventID", DbType="Int")] System.Nullable<int> eventID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventID);
			return ((ISingleResult<LoadCommentResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LoadEventInfo")]
		public ISingleResult<LoadEventInfoResult> LoadEventInfo([global::System.Data.Linq.Mapping.ParameterAttribute(Name="EvenID", DbType="Int")] System.Nullable<int> evenID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), evenID);
			return ((ISingleResult<LoadEventInfoResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LoadEventType")]
		public ISingleResult<LoadEventTypeResult> LoadEventType()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<LoadEventTypeResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LoadHotedEvent")]
		public ISingleResult<LoadHotedEventResult> LoadHotedEvent()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<LoadHotedEventResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LoadNewestEvent")]
		public ISingleResult<LoadNewestEventResult> LoadNewestEvent()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<LoadNewestEventResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Login")]
		public ISingleResult<LoginResult> Login([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Email", DbType="VarChar(200)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Password", DbType="VarChar(200)")] string password)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), email, password);
			return ((ISingleResult<LoginResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Register")]
		public int Register([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(200)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Email", DbType="VarChar(200)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pass", DbType="VarChar(200)")] string pass, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Gender", DbType="Bit")] System.Nullable<bool> gender, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BirthDay", DbType="Date")] System.Nullable<System.DateTime> birthDay, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VerificationCode", DbType="VarChar(200)")] string verificationCode)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, email, pass, gender, birthDay, verificationCode);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.loadEvent")]
		public ISingleResult<loadEventResult> loadEvent([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> lat1, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> long1, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> r)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), lat1, long1, r);
			return ((ISingleResult<loadEventResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccID;
		
		private int _RoleID;
		
		private string _Email;
		
		private string _Password;
		
		private EntityRef<AccountInfo> _AccountInfo;
		
		private EntitySet<Activity> _Activities;
		
		private EntitySet<Activity> _Activities1;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<EventInfo> _EventInfos;
		
		private EntitySet<EventTrustDetail> _EventTrustDetails;
		
		private EntitySet<Relation> _Relations;
		
		private EntitySet<Relation> _Relations1;
		
		private EntitySet<Suggestion> _Suggestions;
		
		private EntitySet<UserLocation> _UserLocations;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccIDChanging(int value);
    partial void OnAccIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Account()
		{
			this._AccountInfo = default(EntityRef<AccountInfo>);
			this._Activities = new EntitySet<Activity>(new Action<Activity>(this.attach_Activities), new Action<Activity>(this.detach_Activities));
			this._Activities1 = new EntitySet<Activity>(new Action<Activity>(this.attach_Activities1), new Action<Activity>(this.detach_Activities1));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._EventInfos = new EntitySet<EventInfo>(new Action<EventInfo>(this.attach_EventInfos), new Action<EventInfo>(this.detach_EventInfos));
			this._EventTrustDetails = new EntitySet<EventTrustDetail>(new Action<EventTrustDetail>(this.attach_EventTrustDetails), new Action<EventTrustDetail>(this.detach_EventTrustDetails));
			this._Relations = new EntitySet<Relation>(new Action<Relation>(this.attach_Relations), new Action<Relation>(this.detach_Relations));
			this._Relations1 = new EntitySet<Relation>(new Action<Relation>(this.attach_Relations1), new Action<Relation>(this.detach_Relations1));
			this._Suggestions = new EntitySet<Suggestion>(new Action<Suggestion>(this.attach_Suggestions), new Action<Suggestion>(this.detach_Suggestions));
			this._UserLocations = new EntitySet<UserLocation>(new Action<UserLocation>(this.attach_UserLocations), new Action<UserLocation>(this.detach_UserLocations));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this.OnAccIDChanging(value);
					this.SendPropertyChanging();
					this._AccID = value;
					this.SendPropertyChanged("AccID");
					this.OnAccIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountInfo", Storage="_AccountInfo", ThisKey="AccID", OtherKey="AccID", IsUnique=true, IsForeignKey=false)]
		public AccountInfo AccountInfo
		{
			get
			{
				return this._AccountInfo.Entity;
			}
			set
			{
				AccountInfo previousValue = this._AccountInfo.Entity;
				if (((previousValue != value) 
							|| (this._AccountInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountInfo.Entity = null;
						previousValue.Account = null;
					}
					this._AccountInfo.Entity = value;
					if ((value != null))
					{
						value.Account = this;
					}
					this.SendPropertyChanged("AccountInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Activity", Storage="_Activities", ThisKey="AccID", OtherKey="AccID")]
		public EntitySet<Activity> Activities
		{
			get
			{
				return this._Activities;
			}
			set
			{
				this._Activities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Activity1", Storage="_Activities1", ThisKey="AccID", OtherKey="FriendID")]
		public EntitySet<Activity> Activities1
		{
			get
			{
				return this._Activities1;
			}
			set
			{
				this._Activities1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Comment", Storage="_Comments", ThisKey="AccID", OtherKey="AccID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_EventInfo", Storage="_EventInfos", ThisKey="AccID", OtherKey="AccID")]
		public EntitySet<EventInfo> EventInfos
		{
			get
			{
				return this._EventInfos;
			}
			set
			{
				this._EventInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_EventTrustDetail", Storage="_EventTrustDetails", ThisKey="AccID", OtherKey="AccID")]
		public EntitySet<EventTrustDetail> EventTrustDetails
		{
			get
			{
				return this._EventTrustDetails;
			}
			set
			{
				this._EventTrustDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Relation", Storage="_Relations", ThisKey="AccID", OtherKey="FriendID")]
		public EntitySet<Relation> Relations
		{
			get
			{
				return this._Relations;
			}
			set
			{
				this._Relations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Relation1", Storage="_Relations1", ThisKey="AccID", OtherKey="AccID")]
		public EntitySet<Relation> Relations1
		{
			get
			{
				return this._Relations1;
			}
			set
			{
				this._Relations1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Suggestion", Storage="_Suggestions", ThisKey="AccID", OtherKey="AccID")]
		public EntitySet<Suggestion> Suggestions
		{
			get
			{
				return this._Suggestions;
			}
			set
			{
				this._Suggestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_UserLocation", Storage="_UserLocations", ThisKey="AccID", OtherKey="AccID")]
		public EntitySet<UserLocation> UserLocations
		{
			get
			{
				return this._UserLocations;
			}
			set
			{
				this._UserLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Account", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Activities1(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Account1 = this;
		}
		
		private void detach_Activities1(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Account1 = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_EventInfos(EventInfo entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_EventInfos(EventInfo entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_EventTrustDetails(EventTrustDetail entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_EventTrustDetails(EventTrustDetail entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Relations(Relation entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Relations(Relation entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Relations1(Relation entity)
		{
			this.SendPropertyChanging();
			entity.Account1 = this;
		}
		
		private void detach_Relations1(Relation entity)
		{
			this.SendPropertyChanging();
			entity.Account1 = null;
		}
		
		private void attach_Suggestions(Suggestion entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Suggestions(Suggestion entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_UserLocations(UserLocation entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_UserLocations(UserLocation entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebsiteInfo")]
	public partial class WebsiteInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WebsiteID;
		
		private string _Name;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Email;
		
		private string _WebsiteURL;
		
		private string _Fax;
		
		private string _Info;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWebsiteIDChanging(int value);
    partial void OnWebsiteIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteURLChanging(string value);
    partial void OnWebsiteURLChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    #endregion
		
		public WebsiteInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebsiteID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WebsiteID
		{
			get
			{
				return this._WebsiteID;
			}
			set
			{
				if ((this._WebsiteID != value))
				{
					this.OnWebsiteIDChanging(value);
					this.SendPropertyChanging();
					this._WebsiteID = value;
					this.SendPropertyChanged("WebsiteID");
					this.OnWebsiteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(4000)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebsiteURL", DbType="NVarChar(1000)")]
		public string WebsiteURL
		{
			get
			{
				return this._WebsiteURL;
			}
			set
			{
				if ((this._WebsiteURL != value))
				{
					this.OnWebsiteURLChanging(value);
					this.SendPropertyChanging();
					this._WebsiteURL = value;
					this.SendPropertyChanged("WebsiteURL");
					this.OnWebsiteURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(20)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Info", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountInfo")]
	public partial class AccountInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccID;
		
		private string _Name;
		
		private string _Address;
		
		private string _Street;
		
		private string _District;
		
		private string _City;
		
		private string _Country;
		
		private string _Avatar;
		
		private string _Phone;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private System.Nullable<bool> _Gender;
		
		private System.Nullable<int> _ShareID;
		
		private string _Favorite;
		
		private string _AccessToken;
		
		private string _VerificationCode;
		
		private System.DateTime _DayCreate;
		
		private System.Nullable<bool> _IsOnline;
		
		private int _Status;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<ShareType> _ShareType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccIDChanging(int value);
    partial void OnAccIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnDistrictChanging(string value);
    partial void OnDistrictChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnAvatarChanging(string value);
    partial void OnAvatarChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnShareIDChanging(System.Nullable<int> value);
    partial void OnShareIDChanged();
    partial void OnFavoriteChanging(string value);
    partial void OnFavoriteChanged();
    partial void OnAccessTokenChanging(string value);
    partial void OnAccessTokenChanged();
    partial void OnVerificationCodeChanging(string value);
    partial void OnVerificationCodeChanged();
    partial void OnDayCreateChanging(System.DateTime value);
    partial void OnDayCreateChanged();
    partial void OnIsOnlineChanging(System.Nullable<bool> value);
    partial void OnIsOnlineChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public AccountInfo()
		{
			this._Account = default(EntityRef<Account>);
			this._ShareType = default(EntityRef<ShareType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccIDChanging(value);
					this.SendPropertyChanging();
					this._AccID = value;
					this.SendPropertyChanged("AccID");
					this.OnAccIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(200)")]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District", DbType="NVarChar(200)")]
		public string District
		{
			get
			{
				return this._District;
			}
			set
			{
				if ((this._District != value))
				{
					this.OnDistrictChanging(value);
					this.SendPropertyChanging();
					this._District = value;
					this.SendPropertyChanged("District");
					this.OnDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(200)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(200)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarChar(255)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareID", DbType="Int")]
		public System.Nullable<int> ShareID
		{
			get
			{
				return this._ShareID;
			}
			set
			{
				if ((this._ShareID != value))
				{
					if (this._ShareType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShareIDChanging(value);
					this.SendPropertyChanging();
					this._ShareID = value;
					this.SendPropertyChanged("ShareID");
					this.OnShareIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Favorite", DbType="NVarChar(MAX)")]
		public string Favorite
		{
			get
			{
				return this._Favorite;
			}
			set
			{
				if ((this._Favorite != value))
				{
					this.OnFavoriteChanging(value);
					this.SendPropertyChanging();
					this._Favorite = value;
					this.SendPropertyChanged("Favorite");
					this.OnFavoriteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessToken", DbType="NVarChar(MAX)")]
		public string AccessToken
		{
			get
			{
				return this._AccessToken;
			}
			set
			{
				if ((this._AccessToken != value))
				{
					this.OnAccessTokenChanging(value);
					this.SendPropertyChanging();
					this._AccessToken = value;
					this.SendPropertyChanged("AccessToken");
					this.OnAccessTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerificationCode", DbType="VarChar(MAX)")]
		public string VerificationCode
		{
			get
			{
				return this._VerificationCode;
			}
			set
			{
				if ((this._VerificationCode != value))
				{
					this.OnVerificationCodeChanging(value);
					this.SendPropertyChanging();
					this._VerificationCode = value;
					this.SendPropertyChanged("VerificationCode");
					this.OnVerificationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="Date NOT NULL")]
		public System.DateTime DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this.OnDayCreateChanging(value);
					this.SendPropertyChanging();
					this._DayCreate = value;
					this.SendPropertyChanged("DayCreate");
					this.OnDayCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOnline", DbType="Bit")]
		public System.Nullable<bool> IsOnline
		{
			get
			{
				return this._IsOnline;
			}
			set
			{
				if ((this._IsOnline != value))
				{
					this.OnIsOnlineChanging(value);
					this.SendPropertyChanging();
					this._IsOnline = value;
					this.SendPropertyChanged("IsOnline");
					this.OnIsOnlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountInfo", Storage="_Account", ThisKey="AccID", OtherKey="AccID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountInfo = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountInfo = this;
						this._AccID = value.AccID;
					}
					else
					{
						this._AccID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareType_AccountInfo", Storage="_ShareType", ThisKey="ShareID", OtherKey="ShareID", IsForeignKey=true)]
		public ShareType ShareType
		{
			get
			{
				return this._ShareType.Entity;
			}
			set
			{
				ShareType previousValue = this._ShareType.Entity;
				if (((previousValue != value) 
							|| (this._ShareType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareType.Entity = null;
						previousValue.AccountInfos.Remove(this);
					}
					this._ShareType.Entity = value;
					if ((value != null))
					{
						value.AccountInfos.Add(this);
						this._ShareID = value.ShareID;
					}
					else
					{
						this._ShareID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ShareType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Activity")]
	public partial class Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActiID;
		
		private int _AccID;
		
		private int _FriendID;
		
		private System.Nullable<int> _EventID;
		
		private System.Nullable<int> _CommentID;
		
		private int _ActiTypeID;
		
		private string _Content;
		
		private System.Nullable<System.DateTime> _DayCreate;
		
		private int _Status;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Account> _Account1;
		
		private EntityRef<ActivityType> _ActivityType;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<EventInfo> _EventInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActiIDChanging(int value);
    partial void OnActiIDChanged();
    partial void OnAccIDChanging(int value);
    partial void OnAccIDChanged();
    partial void OnFriendIDChanging(int value);
    partial void OnFriendIDChanged();
    partial void OnEventIDChanging(System.Nullable<int> value);
    partial void OnEventIDChanged();
    partial void OnCommentIDChanging(System.Nullable<int> value);
    partial void OnCommentIDChanged();
    partial void OnActiTypeIDChanging(int value);
    partial void OnActiTypeIDChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnDayCreateChanging(System.Nullable<System.DateTime> value);
    partial void OnDayCreateChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public Activity()
		{
			this._Account = default(EntityRef<Account>);
			this._Account1 = default(EntityRef<Account>);
			this._ActivityType = default(EntityRef<ActivityType>);
			this._Comment = default(EntityRef<Comment>);
			this._EventInfo = default(EntityRef<EventInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActiID
		{
			get
			{
				return this._ActiID;
			}
			set
			{
				if ((this._ActiID != value))
				{
					this.OnActiIDChanging(value);
					this.SendPropertyChanging();
					this._ActiID = value;
					this.SendPropertyChanged("ActiID");
					this.OnActiIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccIDChanging(value);
					this.SendPropertyChanging();
					this._AccID = value;
					this.SendPropertyChanged("AccID");
					this.OnAccIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FriendID", DbType="Int NOT NULL")]
		public int FriendID
		{
			get
			{
				return this._FriendID;
			}
			set
			{
				if ((this._FriendID != value))
				{
					if (this._Account1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFriendIDChanging(value);
					this.SendPropertyChanging();
					this._FriendID = value;
					this.SendPropertyChanged("FriendID");
					this.OnFriendIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int")]
		public System.Nullable<int> EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._EventInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int")]
		public System.Nullable<int> CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiTypeID", DbType="Int NOT NULL")]
		public int ActiTypeID
		{
			get
			{
				return this._ActiTypeID;
			}
			set
			{
				if ((this._ActiTypeID != value))
				{
					if (this._ActivityType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActiTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ActiTypeID = value;
					this.SendPropertyChanged("ActiTypeID");
					this.OnActiTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this.OnDayCreateChanging(value);
					this.SendPropertyChanging();
					this._DayCreate = value;
					this.SendPropertyChanged("DayCreate");
					this.OnDayCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Activity", Storage="_Account", ThisKey="AccID", OtherKey="AccID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Activities.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Activities.Add(this);
						this._AccID = value.AccID;
					}
					else
					{
						this._AccID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Activity1", Storage="_Account1", ThisKey="FriendID", OtherKey="AccID", IsForeignKey=true)]
		public Account Account1
		{
			get
			{
				return this._Account1.Entity;
			}
			set
			{
				Account previousValue = this._Account1.Entity;
				if (((previousValue != value) 
							|| (this._Account1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account1.Entity = null;
						previousValue.Activities1.Remove(this);
					}
					this._Account1.Entity = value;
					if ((value != null))
					{
						value.Activities1.Add(this);
						this._FriendID = value.AccID;
					}
					else
					{
						this._FriendID = default(int);
					}
					this.SendPropertyChanged("Account1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityType_Activity", Storage="_ActivityType", ThisKey="ActiTypeID", OtherKey="ActiTypeID", IsForeignKey=true)]
		public ActivityType ActivityType
		{
			get
			{
				return this._ActivityType.Entity;
			}
			set
			{
				ActivityType previousValue = this._ActivityType.Entity;
				if (((previousValue != value) 
							|| (this._ActivityType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActivityType.Entity = null;
						previousValue.Activities.Remove(this);
					}
					this._ActivityType.Entity = value;
					if ((value != null))
					{
						value.Activities.Add(this);
						this._ActiTypeID = value.ActiTypeID;
					}
					else
					{
						this._ActiTypeID = default(int);
					}
					this.SendPropertyChanged("ActivityType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Activity", Storage="_Comment", ThisKey="CommentID", OtherKey="CommentID", IsForeignKey=true)]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.Activities.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.Activities.Add(this);
						this._CommentID = value.CommentID;
					}
					else
					{
						this._CommentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventInfo_Activity", Storage="_EventInfo", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
		public EventInfo EventInfo
		{
			get
			{
				return this._EventInfo.Entity;
			}
			set
			{
				EventInfo previousValue = this._EventInfo.Entity;
				if (((previousValue != value) 
							|| (this._EventInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventInfo.Entity = null;
						previousValue.Activities.Remove(this);
					}
					this._EventInfo.Entity = value;
					if ((value != null))
					{
						value.Activities.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EventInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActivityType")]
	public partial class ActivityType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActiTypeID;
		
		private string _ActiTypeName;
		
		private string _Description;
		
		private int _Status;
		
		private EntitySet<Activity> _Activities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActiTypeIDChanging(int value);
    partial void OnActiTypeIDChanged();
    partial void OnActiTypeNameChanging(string value);
    partial void OnActiTypeNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public ActivityType()
		{
			this._Activities = new EntitySet<Activity>(new Action<Activity>(this.attach_Activities), new Action<Activity>(this.detach_Activities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActiTypeID
		{
			get
			{
				return this._ActiTypeID;
			}
			set
			{
				if ((this._ActiTypeID != value))
				{
					this.OnActiTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ActiTypeID = value;
					this.SendPropertyChanged("ActiTypeID");
					this.OnActiTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiTypeName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string ActiTypeName
		{
			get
			{
				return this._ActiTypeName;
			}
			set
			{
				if ((this._ActiTypeName != value))
				{
					this.OnActiTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ActiTypeName = value;
					this.SendPropertyChanged("ActiTypeName");
					this.OnActiTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityType_Activity", Storage="_Activities", ThisKey="ActiTypeID", OtherKey="ActiTypeID")]
		public EntitySet<Activity> Activities
		{
			get
			{
				return this._Activities;
			}
			set
			{
				this._Activities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.ActivityType = this;
		}
		
		private void detach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.ActivityType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentID;
		
		private int _AccID;
		
		private int _EventID;
		
		private string _Content;
		
		private System.Nullable<System.DateTime> _DayCreate;
		
		private bool _Status;
		
		private EntitySet<Activity> _Activities;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<EventInfo> _EventInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    partial void OnAccIDChanging(int value);
    partial void OnAccIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnDayCreateChanging(System.Nullable<System.DateTime> value);
    partial void OnDayCreateChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    #endregion
		
		public Comment()
		{
			this._Activities = new EntitySet<Activity>(new Action<Activity>(this.attach_Activities), new Action<Activity>(this.detach_Activities));
			this._Account = default(EntityRef<Account>);
			this._EventInfo = default(EntityRef<EventInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccIDChanging(value);
					this.SendPropertyChanging();
					this._AccID = value;
					this.SendPropertyChanged("AccID");
					this.OnAccIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._EventInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this.OnDayCreateChanging(value);
					this.SendPropertyChanging();
					this._DayCreate = value;
					this.SendPropertyChanged("DayCreate");
					this.OnDayCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Activity", Storage="_Activities", ThisKey="CommentID", OtherKey="CommentID")]
		public EntitySet<Activity> Activities
		{
			get
			{
				return this._Activities;
			}
			set
			{
				this._Activities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Comment", Storage="_Account", ThisKey="AccID", OtherKey="AccID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._AccID = value.AccID;
					}
					else
					{
						this._AccID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventInfo_Comment", Storage="_EventInfo", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
		public EventInfo EventInfo
		{
			get
			{
				return this._EventInfo.Entity;
			}
			set
			{
				EventInfo previousValue = this._EventInfo.Entity;
				if (((previousValue != value) 
							|| (this._EventInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventInfo.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._EventInfo.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("EventInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventInfo")]
	public partial class EventInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private int _AccID;
		
		private System.Nullable<int> _EventTypeID;
		
		private string _Title;
		
		private string _Description;
		
		private string _Picture;
		
		private System.DateTime _DayCreate;
		
		private double _EventLat;
		
		private double _EventLng;
		
		private System.Nullable<int> _ShareID;
		
		private int _Like;
		
		private int _Dislike;
		
		private bool _Status;
		
		private EntitySet<Activity> _Activities;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<EventTrustDetail> _EventTrustDetails;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<EventType> _EventType;
		
		private EntityRef<ShareType> _ShareType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnAccIDChanging(int value);
    partial void OnAccIDChanged();
    partial void OnEventTypeIDChanging(System.Nullable<int> value);
    partial void OnEventTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnDayCreateChanging(System.DateTime value);
    partial void OnDayCreateChanged();
    partial void OnEventLatChanging(double value);
    partial void OnEventLatChanged();
    partial void OnEventLngChanging(double value);
    partial void OnEventLngChanged();
    partial void OnShareIDChanging(System.Nullable<int> value);
    partial void OnShareIDChanged();
    partial void OnLikeChanging(int value);
    partial void OnLikeChanged();
    partial void OnDislikeChanging(int value);
    partial void OnDislikeChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    #endregion
		
		public EventInfo()
		{
			this._Activities = new EntitySet<Activity>(new Action<Activity>(this.attach_Activities), new Action<Activity>(this.detach_Activities));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._EventTrustDetails = new EntitySet<EventTrustDetail>(new Action<EventTrustDetail>(this.attach_EventTrustDetails), new Action<EventTrustDetail>(this.detach_EventTrustDetails));
			this._Account = default(EntityRef<Account>);
			this._EventType = default(EntityRef<EventType>);
			this._ShareType = default(EntityRef<ShareType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccIDChanging(value);
					this.SendPropertyChanging();
					this._AccID = value;
					this.SendPropertyChanged("AccID");
					this.OnAccIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeID", DbType="Int")]
		public System.Nullable<int> EventTypeID
		{
			get
			{
				return this._EventTypeID;
			}
			set
			{
				if ((this._EventTypeID != value))
				{
					if (this._EventType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EventTypeID = value;
					this.SendPropertyChanged("EventTypeID");
					this.OnEventTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="VarChar(1000)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this.OnDayCreateChanging(value);
					this.SendPropertyChanging();
					this._DayCreate = value;
					this.SendPropertyChanged("DayCreate");
					this.OnDayCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventLat", DbType="Float NOT NULL")]
		public double EventLat
		{
			get
			{
				return this._EventLat;
			}
			set
			{
				if ((this._EventLat != value))
				{
					this.OnEventLatChanging(value);
					this.SendPropertyChanging();
					this._EventLat = value;
					this.SendPropertyChanged("EventLat");
					this.OnEventLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventLng", DbType="Float NOT NULL")]
		public double EventLng
		{
			get
			{
				return this._EventLng;
			}
			set
			{
				if ((this._EventLng != value))
				{
					this.OnEventLngChanging(value);
					this.SendPropertyChanging();
					this._EventLng = value;
					this.SendPropertyChanged("EventLng");
					this.OnEventLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareID", DbType="Int")]
		public System.Nullable<int> ShareID
		{
			get
			{
				return this._ShareID;
			}
			set
			{
				if ((this._ShareID != value))
				{
					if (this._ShareType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShareIDChanging(value);
					this.SendPropertyChanging();
					this._ShareID = value;
					this.SendPropertyChanged("ShareID");
					this.OnShareIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Like]", Storage="_Like", DbType="Int NOT NULL")]
		public int Like
		{
			get
			{
				return this._Like;
			}
			set
			{
				if ((this._Like != value))
				{
					this.OnLikeChanging(value);
					this.SendPropertyChanging();
					this._Like = value;
					this.SendPropertyChanged("Like");
					this.OnLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dislike", DbType="Int NOT NULL")]
		public int Dislike
		{
			get
			{
				return this._Dislike;
			}
			set
			{
				if ((this._Dislike != value))
				{
					this.OnDislikeChanging(value);
					this.SendPropertyChanging();
					this._Dislike = value;
					this.SendPropertyChanged("Dislike");
					this.OnDislikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventInfo_Activity", Storage="_Activities", ThisKey="EventID", OtherKey="EventID")]
		public EntitySet<Activity> Activities
		{
			get
			{
				return this._Activities;
			}
			set
			{
				this._Activities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventInfo_Comment", Storage="_Comments", ThisKey="EventID", OtherKey="EventID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventInfo_EventTrustDetail", Storage="_EventTrustDetails", ThisKey="EventID", OtherKey="EventID")]
		public EntitySet<EventTrustDetail> EventTrustDetails
		{
			get
			{
				return this._EventTrustDetails;
			}
			set
			{
				this._EventTrustDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_EventInfo", Storage="_Account", ThisKey="AccID", OtherKey="AccID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.EventInfos.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.EventInfos.Add(this);
						this._AccID = value.AccID;
					}
					else
					{
						this._AccID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_EventInfo", Storage="_EventType", ThisKey="EventTypeID", OtherKey="EventTypeID", IsForeignKey=true)]
		public EventType EventType
		{
			get
			{
				return this._EventType.Entity;
			}
			set
			{
				EventType previousValue = this._EventType.Entity;
				if (((previousValue != value) 
							|| (this._EventType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventType.Entity = null;
						previousValue.EventInfos.Remove(this);
					}
					this._EventType.Entity = value;
					if ((value != null))
					{
						value.EventInfos.Add(this);
						this._EventTypeID = value.EventTypeID;
					}
					else
					{
						this._EventTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EventType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareType_EventInfo", Storage="_ShareType", ThisKey="ShareID", OtherKey="ShareID", IsForeignKey=true)]
		public ShareType ShareType
		{
			get
			{
				return this._ShareType.Entity;
			}
			set
			{
				ShareType previousValue = this._ShareType.Entity;
				if (((previousValue != value) 
							|| (this._ShareType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareType.Entity = null;
						previousValue.EventInfos.Remove(this);
					}
					this._ShareType.Entity = value;
					if ((value != null))
					{
						value.EventInfos.Add(this);
						this._ShareID = value.ShareID;
					}
					else
					{
						this._ShareID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ShareType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.EventInfo = this;
		}
		
		private void detach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.EventInfo = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.EventInfo = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.EventInfo = null;
		}
		
		private void attach_EventTrustDetails(EventTrustDetail entity)
		{
			this.SendPropertyChanging();
			entity.EventInfo = this;
		}
		
		private void detach_EventTrustDetails(EventTrustDetail entity)
		{
			this.SendPropertyChanging();
			entity.EventInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventTrustDetail")]
	public partial class EventTrustDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private int _AccID;
		
		private System.Nullable<int> _Like;
		
		private System.Nullable<int> _Dislike;
		
		private EntityRef<EventInfo> _EventInfo;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnAccIDChanging(int value);
    partial void OnAccIDChanged();
    partial void OnLikeChanging(System.Nullable<int> value);
    partial void OnLikeChanged();
    partial void OnDislikeChanging(System.Nullable<int> value);
    partial void OnDislikeChanged();
    #endregion
		
		public EventTrustDetail()
		{
			this._EventInfo = default(EntityRef<EventInfo>);
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._EventInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccIDChanging(value);
					this.SendPropertyChanging();
					this._AccID = value;
					this.SendPropertyChanged("AccID");
					this.OnAccIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Like]", Storage="_Like", DbType="Int")]
		public System.Nullable<int> Like
		{
			get
			{
				return this._Like;
			}
			set
			{
				if ((this._Like != value))
				{
					this.OnLikeChanging(value);
					this.SendPropertyChanging();
					this._Like = value;
					this.SendPropertyChanged("Like");
					this.OnLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dislike", DbType="Int")]
		public System.Nullable<int> Dislike
		{
			get
			{
				return this._Dislike;
			}
			set
			{
				if ((this._Dislike != value))
				{
					this.OnDislikeChanging(value);
					this.SendPropertyChanging();
					this._Dislike = value;
					this.SendPropertyChanged("Dislike");
					this.OnDislikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventInfo_EventTrustDetail", Storage="_EventInfo", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
		public EventInfo EventInfo
		{
			get
			{
				return this._EventInfo.Entity;
			}
			set
			{
				EventInfo previousValue = this._EventInfo.Entity;
				if (((previousValue != value) 
							|| (this._EventInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventInfo.Entity = null;
						previousValue.EventTrustDetails.Remove(this);
					}
					this._EventInfo.Entity = value;
					if ((value != null))
					{
						value.EventTrustDetails.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("EventInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_EventTrustDetail", Storage="_Account", ThisKey="AccID", OtherKey="AccID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.EventTrustDetails.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.EventTrustDetails.Add(this);
						this._AccID = value.AccID;
					}
					else
					{
						this._AccID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventType")]
	public partial class EventType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventTypeID;
		
		private string _EventTypeName;
		
		private string _LabelImage;
		
		private System.TimeSpan _Time;
		
		private int _Status;
		
		private EntitySet<EventInfo> _EventInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventTypeIDChanging(int value);
    partial void OnEventTypeIDChanged();
    partial void OnEventTypeNameChanging(string value);
    partial void OnEventTypeNameChanged();
    partial void OnLabelImageChanging(string value);
    partial void OnLabelImageChanged();
    partial void OnTimeChanging(System.TimeSpan value);
    partial void OnTimeChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public EventType()
		{
			this._EventInfos = new EntitySet<EventInfo>(new Action<EventInfo>(this.attach_EventInfos), new Action<EventInfo>(this.detach_EventInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventTypeID
		{
			get
			{
				return this._EventTypeID;
			}
			set
			{
				if ((this._EventTypeID != value))
				{
					this.OnEventTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EventTypeID = value;
					this.SendPropertyChanged("EventTypeID");
					this.OnEventTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string EventTypeName
		{
			get
			{
				return this._EventTypeName;
			}
			set
			{
				if ((this._EventTypeName != value))
				{
					this.OnEventTypeNameChanging(value);
					this.SendPropertyChanging();
					this._EventTypeName = value;
					this.SendPropertyChanged("EventTypeName");
					this.OnEventTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabelImage", DbType="VarChar(1000)")]
		public string LabelImage
		{
			get
			{
				return this._LabelImage;
			}
			set
			{
				if ((this._LabelImage != value))
				{
					this.OnLabelImageChanging(value);
					this.SendPropertyChanging();
					this._LabelImage = value;
					this.SendPropertyChanged("LabelImage");
					this.OnLabelImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Time NOT NULL")]
		public System.TimeSpan Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_EventInfo", Storage="_EventInfos", ThisKey="EventTypeID", OtherKey="EventTypeID")]
		public EntitySet<EventInfo> EventInfos
		{
			get
			{
				return this._EventInfos;
			}
			set
			{
				this._EventInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventInfos(EventInfo entity)
		{
			this.SendPropertyChanging();
			entity.EventType = this;
		}
		
		private void detach_EventInfos(EventInfo entity)
		{
			this.SendPropertyChanging();
			entity.EventType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Relation")]
	public partial class Relation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelationID;
		
		private int _AccID;
		
		private int _FriendID;
		
		private System.Nullable<int> _RelationTypeID;
		
		private System.Nullable<System.DateTime> _DayCreate;
		
		private int _Status;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Account> _Account1;
		
		private EntityRef<RelationType> _RelationType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationIDChanging(int value);
    partial void OnRelationIDChanged();
    partial void OnAccIDChanging(int value);
    partial void OnAccIDChanged();
    partial void OnFriendIDChanging(int value);
    partial void OnFriendIDChanged();
    partial void OnRelationTypeIDChanging(System.Nullable<int> value);
    partial void OnRelationTypeIDChanged();
    partial void OnDayCreateChanging(System.Nullable<System.DateTime> value);
    partial void OnDayCreateChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public Relation()
		{
			this._Account = default(EntityRef<Account>);
			this._Account1 = default(EntityRef<Account>);
			this._RelationType = default(EntityRef<RelationType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RelationID
		{
			get
			{
				return this._RelationID;
			}
			set
			{
				if ((this._RelationID != value))
				{
					this.OnRelationIDChanging(value);
					this.SendPropertyChanging();
					this._RelationID = value;
					this.SendPropertyChanged("RelationID");
					this.OnRelationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					if (this._Account1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccIDChanging(value);
					this.SendPropertyChanging();
					this._AccID = value;
					this.SendPropertyChanged("AccID");
					this.OnAccIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FriendID", DbType="Int NOT NULL")]
		public int FriendID
		{
			get
			{
				return this._FriendID;
			}
			set
			{
				if ((this._FriendID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFriendIDChanging(value);
					this.SendPropertyChanging();
					this._FriendID = value;
					this.SendPropertyChanged("FriendID");
					this.OnFriendIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationTypeID", DbType="Int")]
		public System.Nullable<int> RelationTypeID
		{
			get
			{
				return this._RelationTypeID;
			}
			set
			{
				if ((this._RelationTypeID != value))
				{
					if (this._RelationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RelationTypeID = value;
					this.SendPropertyChanged("RelationTypeID");
					this.OnRelationTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this.OnDayCreateChanging(value);
					this.SendPropertyChanging();
					this._DayCreate = value;
					this.SendPropertyChanged("DayCreate");
					this.OnDayCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Relation", Storage="_Account", ThisKey="FriendID", OtherKey="AccID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Relations.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Relations.Add(this);
						this._FriendID = value.AccID;
					}
					else
					{
						this._FriendID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Relation1", Storage="_Account1", ThisKey="AccID", OtherKey="AccID", IsForeignKey=true)]
		public Account Account1
		{
			get
			{
				return this._Account1.Entity;
			}
			set
			{
				Account previousValue = this._Account1.Entity;
				if (((previousValue != value) 
							|| (this._Account1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account1.Entity = null;
						previousValue.Relations1.Remove(this);
					}
					this._Account1.Entity = value;
					if ((value != null))
					{
						value.Relations1.Add(this);
						this._AccID = value.AccID;
					}
					else
					{
						this._AccID = default(int);
					}
					this.SendPropertyChanged("Account1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RelationType_Relation", Storage="_RelationType", ThisKey="RelationTypeID", OtherKey="RelationTypeID", IsForeignKey=true)]
		public RelationType RelationType
		{
			get
			{
				return this._RelationType.Entity;
			}
			set
			{
				RelationType previousValue = this._RelationType.Entity;
				if (((previousValue != value) 
							|| (this._RelationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RelationType.Entity = null;
						previousValue.Relations.Remove(this);
					}
					this._RelationType.Entity = value;
					if ((value != null))
					{
						value.Relations.Add(this);
						this._RelationTypeID = value.RelationTypeID;
					}
					else
					{
						this._RelationTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RelationType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RelationType")]
	public partial class RelationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelationTypeID;
		
		private string _RelationTypeName;
		
		private System.Nullable<int> _ShareID;
		
		private int _Status;
		
		private EntitySet<Relation> _Relations;
		
		private EntityRef<ShareType> _ShareType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationTypeIDChanging(int value);
    partial void OnRelationTypeIDChanged();
    partial void OnRelationTypeNameChanging(string value);
    partial void OnRelationTypeNameChanged();
    partial void OnShareIDChanging(System.Nullable<int> value);
    partial void OnShareIDChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public RelationType()
		{
			this._Relations = new EntitySet<Relation>(new Action<Relation>(this.attach_Relations), new Action<Relation>(this.detach_Relations));
			this._ShareType = default(EntityRef<ShareType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RelationTypeID
		{
			get
			{
				return this._RelationTypeID;
			}
			set
			{
				if ((this._RelationTypeID != value))
				{
					this.OnRelationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RelationTypeID = value;
					this.SendPropertyChanged("RelationTypeID");
					this.OnRelationTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationTypeName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string RelationTypeName
		{
			get
			{
				return this._RelationTypeName;
			}
			set
			{
				if ((this._RelationTypeName != value))
				{
					this.OnRelationTypeNameChanging(value);
					this.SendPropertyChanging();
					this._RelationTypeName = value;
					this.SendPropertyChanged("RelationTypeName");
					this.OnRelationTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareID", DbType="Int")]
		public System.Nullable<int> ShareID
		{
			get
			{
				return this._ShareID;
			}
			set
			{
				if ((this._ShareID != value))
				{
					if (this._ShareType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShareIDChanging(value);
					this.SendPropertyChanging();
					this._ShareID = value;
					this.SendPropertyChanged("ShareID");
					this.OnShareIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RelationType_Relation", Storage="_Relations", ThisKey="RelationTypeID", OtherKey="RelationTypeID")]
		public EntitySet<Relation> Relations
		{
			get
			{
				return this._Relations;
			}
			set
			{
				this._Relations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareType_RelationType", Storage="_ShareType", ThisKey="ShareID", OtherKey="ShareID", IsForeignKey=true)]
		public ShareType ShareType
		{
			get
			{
				return this._ShareType.Entity;
			}
			set
			{
				ShareType previousValue = this._ShareType.Entity;
				if (((previousValue != value) 
							|| (this._ShareType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareType.Entity = null;
						previousValue.RelationTypes.Remove(this);
					}
					this._ShareType.Entity = value;
					if ((value != null))
					{
						value.RelationTypes.Add(this);
						this._ShareID = value.ShareID;
					}
					else
					{
						this._ShareID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ShareType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Relations(Relation entity)
		{
			this.SendPropertyChanging();
			entity.RelationType = this;
		}
		
		private void detach_Relations(Relation entity)
		{
			this.SendPropertyChanging();
			entity.RelationType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _RoleName;
		
		private int _Status;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public Role()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Account", Storage="_Accounts", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShareType")]
	public partial class ShareType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShareID;
		
		private string _TypeName;
		
		private int _Status;
		
		private EntitySet<AccountInfo> _AccountInfos;
		
		private EntitySet<EventInfo> _EventInfos;
		
		private EntitySet<RelationType> _RelationTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShareIDChanging(int value);
    partial void OnShareIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public ShareType()
		{
			this._AccountInfos = new EntitySet<AccountInfo>(new Action<AccountInfo>(this.attach_AccountInfos), new Action<AccountInfo>(this.detach_AccountInfos));
			this._EventInfos = new EntitySet<EventInfo>(new Action<EventInfo>(this.attach_EventInfos), new Action<EventInfo>(this.detach_EventInfos));
			this._RelationTypes = new EntitySet<RelationType>(new Action<RelationType>(this.attach_RelationTypes), new Action<RelationType>(this.detach_RelationTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShareID
		{
			get
			{
				return this._ShareID;
			}
			set
			{
				if ((this._ShareID != value))
				{
					this.OnShareIDChanging(value);
					this.SendPropertyChanging();
					this._ShareID = value;
					this.SendPropertyChanged("ShareID");
					this.OnShareIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareType_AccountInfo", Storage="_AccountInfos", ThisKey="ShareID", OtherKey="ShareID")]
		public EntitySet<AccountInfo> AccountInfos
		{
			get
			{
				return this._AccountInfos;
			}
			set
			{
				this._AccountInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareType_EventInfo", Storage="_EventInfos", ThisKey="ShareID", OtherKey="ShareID")]
		public EntitySet<EventInfo> EventInfos
		{
			get
			{
				return this._EventInfos;
			}
			set
			{
				this._EventInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareType_RelationType", Storage="_RelationTypes", ThisKey="ShareID", OtherKey="ShareID")]
		public EntitySet<RelationType> RelationTypes
		{
			get
			{
				return this._RelationTypes;
			}
			set
			{
				this._RelationTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountInfos(AccountInfo entity)
		{
			this.SendPropertyChanging();
			entity.ShareType = this;
		}
		
		private void detach_AccountInfos(AccountInfo entity)
		{
			this.SendPropertyChanging();
			entity.ShareType = null;
		}
		
		private void attach_EventInfos(EventInfo entity)
		{
			this.SendPropertyChanging();
			entity.ShareType = this;
		}
		
		private void detach_EventInfos(EventInfo entity)
		{
			this.SendPropertyChanging();
			entity.ShareType = null;
		}
		
		private void attach_RelationTypes(RelationType entity)
		{
			this.SendPropertyChanging();
			entity.ShareType = this;
		}
		
		private void detach_RelationTypes(RelationType entity)
		{
			this.SendPropertyChanging();
			entity.ShareType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Suggestion")]
	public partial class Suggestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SuggestionID;
		
		private int _AccID;
		
		private string _Title;
		
		private string _Content;
		
		private System.Nullable<System.DateTime> _DayCreate;
		
		private int _Status;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuggestionIDChanging(int value);
    partial void OnSuggestionIDChanged();
    partial void OnAccIDChanging(int value);
    partial void OnAccIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnDayCreateChanging(System.Nullable<System.DateTime> value);
    partial void OnDayCreateChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public Suggestion()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuggestionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SuggestionID
		{
			get
			{
				return this._SuggestionID;
			}
			set
			{
				if ((this._SuggestionID != value))
				{
					this.OnSuggestionIDChanging(value);
					this.SendPropertyChanging();
					this._SuggestionID = value;
					this.SendPropertyChanged("SuggestionID");
					this.OnSuggestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccIDChanging(value);
					this.SendPropertyChanging();
					this._AccID = value;
					this.SendPropertyChanged("AccID");
					this.OnAccIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this.OnDayCreateChanging(value);
					this.SendPropertyChanging();
					this._DayCreate = value;
					this.SendPropertyChanged("DayCreate");
					this.OnDayCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Suggestion", Storage="_Account", ThisKey="AccID", OtherKey="AccID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Suggestions.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Suggestions.Add(this);
						this._AccID = value.AccID;
					}
					else
					{
						this._AccID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLocation")]
	public partial class UserLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationID;
		
		private int _AccID;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<double> _Longtitude;
		
		private System.Nullable<System.DateTime> _DayCreate;
		
		private int _Status;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnAccIDChanging(int value);
    partial void OnAccIDChanged();
    partial void OnLatitudeChanging(System.Nullable<double> value);
    partial void OnLatitudeChanged();
    partial void OnLongtitudeChanging(System.Nullable<double> value);
    partial void OnLongtitudeChanged();
    partial void OnDayCreateChanging(System.Nullable<System.DateTime> value);
    partial void OnDayCreateChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public UserLocation()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccIDChanging(value);
					this.SendPropertyChanging();
					this._AccID = value;
					this.SendPropertyChanged("AccID");
					this.OnAccIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float")]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longtitude", DbType="Float")]
		public System.Nullable<double> Longtitude
		{
			get
			{
				return this._Longtitude;
			}
			set
			{
				if ((this._Longtitude != value))
				{
					this.OnLongtitudeChanging(value);
					this.SendPropertyChanging();
					this._Longtitude = value;
					this.SendPropertyChanged("Longtitude");
					this.OnLongtitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this.OnDayCreateChanging(value);
					this.SendPropertyChanging();
					this._DayCreate = value;
					this.SendPropertyChanged("DayCreate");
					this.OnDayCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_UserLocation", Storage="_Account", ThisKey="AccID", OtherKey="AccID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.UserLocations.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.UserLocations.Add(this);
						this._AccID = value.AccID;
					}
					else
					{
						this._AccID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class CheckEmailAndPasswordResult
	{
		
		private int _AccID;
		
		private string _Name;
		
		private string _Address;
		
		private string _Street;
		
		private string _District;
		
		private string _City;
		
		private string _Country;
		
		private string _Avatar;
		
		private string _Phone;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private System.Nullable<bool> _Gender;
		
		private System.Nullable<int> _ShareID;
		
		private string _Favorite;
		
		private string _AccessToken;
		
		private string _VerificationCode;
		
		private System.DateTime _DayCreate;
		
		private System.Nullable<bool> _IsOnline;
		
		private int _Status;
		
		public CheckEmailAndPasswordResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this._AccID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(200)")]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this._Street = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District", DbType="NVarChar(200)")]
		public string District
		{
			get
			{
				return this._District;
			}
			set
			{
				if ((this._District != value))
				{
					this._District = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(200)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(200)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this._Country = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarChar(255)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this._Avatar = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this._Phone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this._DateOfBirth = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this._Gender = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareID", DbType="Int")]
		public System.Nullable<int> ShareID
		{
			get
			{
				return this._ShareID;
			}
			set
			{
				if ((this._ShareID != value))
				{
					this._ShareID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Favorite", DbType="NVarChar(MAX)")]
		public string Favorite
		{
			get
			{
				return this._Favorite;
			}
			set
			{
				if ((this._Favorite != value))
				{
					this._Favorite = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessToken", DbType="NVarChar(MAX)")]
		public string AccessToken
		{
			get
			{
				return this._AccessToken;
			}
			set
			{
				if ((this._AccessToken != value))
				{
					this._AccessToken = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerificationCode", DbType="VarChar(MAX)")]
		public string VerificationCode
		{
			get
			{
				return this._VerificationCode;
			}
			set
			{
				if ((this._VerificationCode != value))
				{
					this._VerificationCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="Date NOT NULL")]
		public System.DateTime DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this._DayCreate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOnline", DbType="Bit")]
		public System.Nullable<bool> IsOnline
		{
			get
			{
				return this._IsOnline;
			}
			set
			{
				if ((this._IsOnline != value))
				{
					this._IsOnline = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
	}
	
	public partial class SearchFriendResult
	{
		
		private int _AccID;
		
		private string _Name;
		
		private string _Avatar;
		
		public SearchFriendResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this._AccID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarChar(255)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this._Avatar = value;
				}
			}
		}
	}
	
	public partial class GetFriendListResult
	{
		
		private int _AccID;
		
		private string _Name;
		
		private string _Avatar;
		
		public GetFriendListResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this._AccID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarChar(255)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this._Avatar = value;
				}
			}
		}
	}
	
	public partial class GetFriendLocationResult
	{
		
		private System.Nullable<int> _LocationID;
		
		private System.Nullable<int> _AccID;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<double> _Longtitude;
		
		private System.Nullable<int> _Status;
		
		private System.Nullable<System.DateTime> _DayCreate;
		
		private string _Name;
		
		private string _Avatar;
		
		public GetFriendLocationResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int")]
		public System.Nullable<int> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this._LocationID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int")]
		public System.Nullable<int> AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this._AccID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float")]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this._Latitude = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longtitude", DbType="Float")]
		public System.Nullable<double> Longtitude
		{
			get
			{
				return this._Longtitude;
			}
			set
			{
				if ((this._Longtitude != value))
				{
					this._Longtitude = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this._DayCreate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarChar(255)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this._Avatar = value;
				}
			}
		}
	}
	
	public partial class GetHistoryLocationResult
	{
		
		private int _LocationID;
		
		private int _AccID;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<double> _Longtitude;
		
		private System.Nullable<System.DateTime> _DayCreate;
		
		private int _Status;
		
		public GetHistoryLocationResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL")]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this._LocationID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this._AccID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float")]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this._Latitude = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longtitude", DbType="Float")]
		public System.Nullable<double> Longtitude
		{
			get
			{
				return this._Longtitude;
			}
			set
			{
				if ((this._Longtitude != value))
				{
					this._Longtitude = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this._DayCreate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
	}
	
	public partial class GetInvitationResult
	{
		
		private int _ActiID;
		
		private int _AccID;
		
		private string _Name;
		
		private string _Avatar;
		
		private System.Nullable<System.DateTime> _DayCreate;
		
		public GetInvitationResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiID", DbType="Int NOT NULL")]
		public int ActiID
		{
			get
			{
				return this._ActiID;
			}
			set
			{
				if ((this._ActiID != value))
				{
					this._ActiID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this._AccID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarChar(255)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this._Avatar = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this._DayCreate = value;
				}
			}
		}
	}
	
	public partial class GetNotificationResult
	{
		
		private int _ActiID;
		
		private int _AccID;
		
		private int _ActiTypeID;
		
		private string _Name;
		
		private string _Avatar;
		
		private System.Nullable<System.DateTime> _DayCreate;
		
		private string _Description;
		
		public GetNotificationResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiID", DbType="Int NOT NULL")]
		public int ActiID
		{
			get
			{
				return this._ActiID;
			}
			set
			{
				if ((this._ActiID != value))
				{
					this._ActiID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this._AccID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiTypeID", DbType="Int NOT NULL")]
		public int ActiTypeID
		{
			get
			{
				return this._ActiTypeID;
			}
			set
			{
				if ((this._ActiTypeID != value))
				{
					this._ActiTypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarChar(255)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this._Avatar = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this._DayCreate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
	
	public partial class LoadAllEventResult
	{
		
		private int _EventID;
		
		private int _AccID;
		
		private System.Nullable<int> _EventTypeID;
		
		private string _Title;
		
		private string _Description;
		
		private string _Picture;
		
		private System.DateTime _DayCreate;
		
		private double _EventLat;
		
		private double _EventLng;
		
		private System.Nullable<int> _ShareID;
		
		private int _Like;
		
		private int _Dislike;
		
		private bool _Status;
		
		private string _LabelImage;
		
		private int _AccID1;
		
		private string _Name;
		
		private string _Avatar;
		
		private System.Nullable<System.DateTime> _TimeExist;
		
		public LoadAllEventResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this._EventID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this._AccID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeID", DbType="Int")]
		public System.Nullable<int> EventTypeID
		{
			get
			{
				return this._EventTypeID;
			}
			set
			{
				if ((this._EventTypeID != value))
				{
					this._EventTypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="VarChar(1000)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this._Picture = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this._DayCreate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventLat", DbType="Float NOT NULL")]
		public double EventLat
		{
			get
			{
				return this._EventLat;
			}
			set
			{
				if ((this._EventLat != value))
				{
					this._EventLat = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventLng", DbType="Float NOT NULL")]
		public double EventLng
		{
			get
			{
				return this._EventLng;
			}
			set
			{
				if ((this._EventLng != value))
				{
					this._EventLng = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareID", DbType="Int")]
		public System.Nullable<int> ShareID
		{
			get
			{
				return this._ShareID;
			}
			set
			{
				if ((this._ShareID != value))
				{
					this._ShareID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Like]", Storage="_Like", DbType="Int NOT NULL")]
		public int Like
		{
			get
			{
				return this._Like;
			}
			set
			{
				if ((this._Like != value))
				{
					this._Like = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dislike", DbType="Int NOT NULL")]
		public int Dislike
		{
			get
			{
				return this._Dislike;
			}
			set
			{
				if ((this._Dislike != value))
				{
					this._Dislike = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabelImage", DbType="VarChar(1000)")]
		public string LabelImage
		{
			get
			{
				return this._LabelImage;
			}
			set
			{
				if ((this._LabelImage != value))
				{
					this._LabelImage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID1", DbType="Int NOT NULL")]
		public int AccID1
		{
			get
			{
				return this._AccID1;
			}
			set
			{
				if ((this._AccID1 != value))
				{
					this._AccID1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarChar(255)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this._Avatar = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeExist", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeExist
		{
			get
			{
				return this._TimeExist;
			}
			set
			{
				if ((this._TimeExist != value))
				{
					this._TimeExist = value;
				}
			}
		}
	}
	
	public partial class LoadCommentResult
	{
		
		private string _Name;
		
		private string _Avatar;
		
		private int _CommentID;
		
		private int _AccID;
		
		private int _EventID;
		
		private string _Content;
		
		private System.Nullable<System.DateTime> _DayCreate;
		
		private bool _Status;
		
		public LoadCommentResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarChar(255)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this._Avatar = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					this._CommentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this._AccID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this._EventID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this._Content = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this._DayCreate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
	}
	
	public partial class LoadEventInfoResult
	{
		
		private int _EventID;
		
		private int _AccID;
		
		private System.Nullable<int> _EventTypeID;
		
		private string _Title;
		
		private string _Description;
		
		private string _Picture;
		
		private System.DateTime _DayCreate;
		
		private double _EventLat;
		
		private double _EventLng;
		
		private System.Nullable<int> _ShareID;
		
		private int _Like;
		
		private int _Dislike;
		
		private bool _Status;
		
		private int _EventTypeID1;
		
		private string _EventTypeName;
		
		private string _LabelImage;
		
		private System.TimeSpan _Time;
		
		private int _Status1;
		
		private string _Name;
		
		private string _Avatar;
		
		public LoadEventInfoResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this._EventID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this._AccID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeID", DbType="Int")]
		public System.Nullable<int> EventTypeID
		{
			get
			{
				return this._EventTypeID;
			}
			set
			{
				if ((this._EventTypeID != value))
				{
					this._EventTypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="VarChar(1000)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this._Picture = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this._DayCreate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventLat", DbType="Float NOT NULL")]
		public double EventLat
		{
			get
			{
				return this._EventLat;
			}
			set
			{
				if ((this._EventLat != value))
				{
					this._EventLat = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventLng", DbType="Float NOT NULL")]
		public double EventLng
		{
			get
			{
				return this._EventLng;
			}
			set
			{
				if ((this._EventLng != value))
				{
					this._EventLng = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareID", DbType="Int")]
		public System.Nullable<int> ShareID
		{
			get
			{
				return this._ShareID;
			}
			set
			{
				if ((this._ShareID != value))
				{
					this._ShareID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Like]", Storage="_Like", DbType="Int NOT NULL")]
		public int Like
		{
			get
			{
				return this._Like;
			}
			set
			{
				if ((this._Like != value))
				{
					this._Like = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dislike", DbType="Int NOT NULL")]
		public int Dislike
		{
			get
			{
				return this._Dislike;
			}
			set
			{
				if ((this._Dislike != value))
				{
					this._Dislike = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeID1", DbType="Int NOT NULL")]
		public int EventTypeID1
		{
			get
			{
				return this._EventTypeID1;
			}
			set
			{
				if ((this._EventTypeID1 != value))
				{
					this._EventTypeID1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string EventTypeName
		{
			get
			{
				return this._EventTypeName;
			}
			set
			{
				if ((this._EventTypeName != value))
				{
					this._EventTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabelImage", DbType="VarChar(1000)")]
		public string LabelImage
		{
			get
			{
				return this._LabelImage;
			}
			set
			{
				if ((this._LabelImage != value))
				{
					this._LabelImage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Time NOT NULL")]
		public System.TimeSpan Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this._Time = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status1", DbType="Int NOT NULL")]
		public int Status1
		{
			get
			{
				return this._Status1;
			}
			set
			{
				if ((this._Status1 != value))
				{
					this._Status1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarChar(255)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this._Avatar = value;
				}
			}
		}
	}
	
	public partial class LoadEventTypeResult
	{
		
		private int _EventTypeID;
		
		private string _EventTypeName;
		
		private string _LabelImage;
		
		private System.TimeSpan _Time;
		
		private int _Status;
		
		public LoadEventTypeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeID", DbType="Int NOT NULL")]
		public int EventTypeID
		{
			get
			{
				return this._EventTypeID;
			}
			set
			{
				if ((this._EventTypeID != value))
				{
					this._EventTypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string EventTypeName
		{
			get
			{
				return this._EventTypeName;
			}
			set
			{
				if ((this._EventTypeName != value))
				{
					this._EventTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabelImage", DbType="VarChar(1000)")]
		public string LabelImage
		{
			get
			{
				return this._LabelImage;
			}
			set
			{
				if ((this._LabelImage != value))
				{
					this._LabelImage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Time NOT NULL")]
		public System.TimeSpan Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this._Time = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
	}
	
	public partial class LoadHotedEventResult
	{
		
		private int _EventID;
		
		private int _AccID;
		
		private System.Nullable<int> _EventTypeID;
		
		private string _Title;
		
		private string _Description;
		
		private string _Picture;
		
		private System.DateTime _DayCreate;
		
		private double _EventLat;
		
		private double _EventLng;
		
		private System.Nullable<int> _ShareID;
		
		private int _Like;
		
		private int _Dislike;
		
		private bool _Status;
		
		private string _LabelImage;
		
		private int _AccID1;
		
		private string _Name;
		
		private string _Avatar;
		
		private System.Nullable<System.DateTime> _TimeExist;
		
		public LoadHotedEventResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this._EventID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this._AccID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeID", DbType="Int")]
		public System.Nullable<int> EventTypeID
		{
			get
			{
				return this._EventTypeID;
			}
			set
			{
				if ((this._EventTypeID != value))
				{
					this._EventTypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="VarChar(1000)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this._Picture = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this._DayCreate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventLat", DbType="Float NOT NULL")]
		public double EventLat
		{
			get
			{
				return this._EventLat;
			}
			set
			{
				if ((this._EventLat != value))
				{
					this._EventLat = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventLng", DbType="Float NOT NULL")]
		public double EventLng
		{
			get
			{
				return this._EventLng;
			}
			set
			{
				if ((this._EventLng != value))
				{
					this._EventLng = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareID", DbType="Int")]
		public System.Nullable<int> ShareID
		{
			get
			{
				return this._ShareID;
			}
			set
			{
				if ((this._ShareID != value))
				{
					this._ShareID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Like]", Storage="_Like", DbType="Int NOT NULL")]
		public int Like
		{
			get
			{
				return this._Like;
			}
			set
			{
				if ((this._Like != value))
				{
					this._Like = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dislike", DbType="Int NOT NULL")]
		public int Dislike
		{
			get
			{
				return this._Dislike;
			}
			set
			{
				if ((this._Dislike != value))
				{
					this._Dislike = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabelImage", DbType="VarChar(1000)")]
		public string LabelImage
		{
			get
			{
				return this._LabelImage;
			}
			set
			{
				if ((this._LabelImage != value))
				{
					this._LabelImage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID1", DbType="Int NOT NULL")]
		public int AccID1
		{
			get
			{
				return this._AccID1;
			}
			set
			{
				if ((this._AccID1 != value))
				{
					this._AccID1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarChar(255)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this._Avatar = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeExist", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeExist
		{
			get
			{
				return this._TimeExist;
			}
			set
			{
				if ((this._TimeExist != value))
				{
					this._TimeExist = value;
				}
			}
		}
	}
	
	public partial class LoadNewestEventResult
	{
		
		private int _EventID;
		
		private int _AccID;
		
		private System.Nullable<int> _EventTypeID;
		
		private string _Title;
		
		private string _Description;
		
		private string _Picture;
		
		private System.DateTime _DayCreate;
		
		private double _EventLat;
		
		private double _EventLng;
		
		private System.Nullable<int> _ShareID;
		
		private int _Like;
		
		private int _Dislike;
		
		private bool _Status;
		
		private string _LabelImage;
		
		private int _AccID1;
		
		private string _Name;
		
		private string _Avatar;
		
		private System.Nullable<System.DateTime> _TimeExist;
		
		public LoadNewestEventResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this._EventID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this._AccID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeID", DbType="Int")]
		public System.Nullable<int> EventTypeID
		{
			get
			{
				return this._EventTypeID;
			}
			set
			{
				if ((this._EventTypeID != value))
				{
					this._EventTypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="VarChar(1000)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this._Picture = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this._DayCreate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventLat", DbType="Float NOT NULL")]
		public double EventLat
		{
			get
			{
				return this._EventLat;
			}
			set
			{
				if ((this._EventLat != value))
				{
					this._EventLat = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventLng", DbType="Float NOT NULL")]
		public double EventLng
		{
			get
			{
				return this._EventLng;
			}
			set
			{
				if ((this._EventLng != value))
				{
					this._EventLng = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareID", DbType="Int")]
		public System.Nullable<int> ShareID
		{
			get
			{
				return this._ShareID;
			}
			set
			{
				if ((this._ShareID != value))
				{
					this._ShareID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Like]", Storage="_Like", DbType="Int NOT NULL")]
		public int Like
		{
			get
			{
				return this._Like;
			}
			set
			{
				if ((this._Like != value))
				{
					this._Like = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dislike", DbType="Int NOT NULL")]
		public int Dislike
		{
			get
			{
				return this._Dislike;
			}
			set
			{
				if ((this._Dislike != value))
				{
					this._Dislike = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabelImage", DbType="VarChar(1000)")]
		public string LabelImage
		{
			get
			{
				return this._LabelImage;
			}
			set
			{
				if ((this._LabelImage != value))
				{
					this._LabelImage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID1", DbType="Int NOT NULL")]
		public int AccID1
		{
			get
			{
				return this._AccID1;
			}
			set
			{
				if ((this._AccID1 != value))
				{
					this._AccID1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarChar(255)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this._Avatar = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeExist", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeExist
		{
			get
			{
				return this._TimeExist;
			}
			set
			{
				if ((this._TimeExist != value))
				{
					this._TimeExist = value;
				}
			}
		}
	}
	
	public partial class LoginResult
	{
		
		private string _Email;
		
		private int _RoleID;
		
		private int _AccID;
		
		private string _Name;
		
		private string _Address;
		
		private string _Street;
		
		private string _District;
		
		private string _City;
		
		private string _Country;
		
		private string _Avatar;
		
		private string _Phone;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private System.Nullable<bool> _Gender;
		
		private System.Nullable<int> _ShareID;
		
		private string _Favorite;
		
		private string _AccessToken;
		
		private string _VerificationCode;
		
		private System.DateTime _DayCreate;
		
		private System.Nullable<bool> _IsOnline;
		
		private int _Status;
		
		public LoginResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this._AccID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(200)")]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this._Street = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District", DbType="NVarChar(200)")]
		public string District
		{
			get
			{
				return this._District;
			}
			set
			{
				if ((this._District != value))
				{
					this._District = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(200)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(200)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this._Country = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarChar(255)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this._Avatar = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this._Phone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this._DateOfBirth = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this._Gender = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareID", DbType="Int")]
		public System.Nullable<int> ShareID
		{
			get
			{
				return this._ShareID;
			}
			set
			{
				if ((this._ShareID != value))
				{
					this._ShareID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Favorite", DbType="NVarChar(MAX)")]
		public string Favorite
		{
			get
			{
				return this._Favorite;
			}
			set
			{
				if ((this._Favorite != value))
				{
					this._Favorite = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessToken", DbType="NVarChar(MAX)")]
		public string AccessToken
		{
			get
			{
				return this._AccessToken;
			}
			set
			{
				if ((this._AccessToken != value))
				{
					this._AccessToken = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerificationCode", DbType="VarChar(MAX)")]
		public string VerificationCode
		{
			get
			{
				return this._VerificationCode;
			}
			set
			{
				if ((this._VerificationCode != value))
				{
					this._VerificationCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="Date NOT NULL")]
		public System.DateTime DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this._DayCreate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOnline", DbType="Bit")]
		public System.Nullable<bool> IsOnline
		{
			get
			{
				return this._IsOnline;
			}
			set
			{
				if ((this._IsOnline != value))
				{
					this._IsOnline = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
	}
	
	public partial class loadEventResult
	{
		
		private int _EventID;
		
		private int _AccID;
		
		private System.Nullable<int> _EventTypeID;
		
		private string _Title;
		
		private string _Description;
		
		private string _Picture;
		
		private System.DateTime _DayCreate;
		
		private double _EventLat;
		
		private double _EventLng;
		
		private System.Nullable<int> _ShareID;
		
		private int _Like;
		
		private int _Dislike;
		
		private bool _Status;
		
		private string _LabelImage;
		
		private int _AccID1;
		
		private string _Name;
		
		private string _Avatar;
		
		private System.Nullable<double> _Distance;
		
		private System.Nullable<System.DateTime> _TimeExist;
		
		public loadEventResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this._EventID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int NOT NULL")]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this._AccID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeID", DbType="Int")]
		public System.Nullable<int> EventTypeID
		{
			get
			{
				return this._EventTypeID;
			}
			set
			{
				if ((this._EventTypeID != value))
				{
					this._EventTypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="VarChar(1000)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this._Picture = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DayCreate
		{
			get
			{
				return this._DayCreate;
			}
			set
			{
				if ((this._DayCreate != value))
				{
					this._DayCreate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventLat", DbType="Float NOT NULL")]
		public double EventLat
		{
			get
			{
				return this._EventLat;
			}
			set
			{
				if ((this._EventLat != value))
				{
					this._EventLat = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventLng", DbType="Float NOT NULL")]
		public double EventLng
		{
			get
			{
				return this._EventLng;
			}
			set
			{
				if ((this._EventLng != value))
				{
					this._EventLng = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareID", DbType="Int")]
		public System.Nullable<int> ShareID
		{
			get
			{
				return this._ShareID;
			}
			set
			{
				if ((this._ShareID != value))
				{
					this._ShareID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Like]", Storage="_Like", DbType="Int NOT NULL")]
		public int Like
		{
			get
			{
				return this._Like;
			}
			set
			{
				if ((this._Like != value))
				{
					this._Like = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dislike", DbType="Int NOT NULL")]
		public int Dislike
		{
			get
			{
				return this._Dislike;
			}
			set
			{
				if ((this._Dislike != value))
				{
					this._Dislike = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabelImage", DbType="VarChar(1000)")]
		public string LabelImage
		{
			get
			{
				return this._LabelImage;
			}
			set
			{
				if ((this._LabelImage != value))
				{
					this._LabelImage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID1", DbType="Int NOT NULL")]
		public int AccID1
		{
			get
			{
				return this._AccID1;
			}
			set
			{
				if ((this._AccID1 != value))
				{
					this._AccID1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarChar(255)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this._Avatar = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeExist", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeExist
		{
			get
			{
				return this._TimeExist;
			}
			set
			{
				if ((this._TimeExist != value))
				{
					this._TimeExist = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
